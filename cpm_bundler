#!/usr/bin/env perl
use 5.28.2;
use strict;

use File::Path qw/remove_tree make_path/;
use File::Spec;

use CPAN::Meta::Requirements;
use Getopt::Long ();
use Cwd ();

use JSON::PP;

my $bin_cpm = '/usr/bin/cpm';
my $build_dir = "build/";
my $cpanfile_snapshot = 'cpanfile.snapshot';

Getopt::Long::GetOptions(
    "f|force" => \my $force,
    "t|restore" => \my $restore,
    "update=s" => \my $update,
    "install=s" => \my $install,
    "rebuild" => \my $rebuild,
    "config=s" => \my $config_json,
    "cpm_path=s" => \my $path_cpm,
    "dev_cpm" => \my $dev_cpm,
    "build_dir=s" => \$build_dir,
) or exit 1;

die "Config file `$config_json` does not exists" if $config_json && !-f $config_json;
$config_json ||= ".cpm_bundler.json";
if (-f $config_json) {
    open(my $json_cfg_fh, '<', $config_json) or die "Can't open `$config_json`: $!";
    my $json;
    $json .= $_ while(<$json_cfg_fh>);

    close($json_cfg_fh);
    my $cfg = JSON::PP->new->relaxed([])->decode($json);
    $ENV{$_} = $cfg->{ENV}->{$_} . (exists $ENV{$_} ? ':' . $ENV{$_} : '') for keys %{$cfg->{ENV}};
}

$bin_cpm = File::Spec->join($path_cpm, '/cpm') if $path_cpm;
die "dev_cpm required cpm_path option" if $dev_cpm && ! $path_cpm;
die "cpm `$bin_cpm` not found" unless -f $bin_cpm;

my $builddir_local_lib = File::Spec->join($build_dir, '/local/lib/perl5');

my @lib_cpm = ($builddir_local_lib);
push @INC, $builddir_local_lib;

if ($dev_cpm && $path_cpm) {
    push @lib_cpm, File::Spec->join($path_cpm, '../../lib');
    push @lib_cpm, File::Spec->join($path_cpm, '../../local/lib/perl5');
}

my $path_cpanfile = File::Spec->join($build_dir, '/cpanfile');

make_path($build_dir) unless -d $build_dir;
unless (-f $path_cpanfile) {
    open(my $cpanfile, '>', $path_cpanfile) or die "Can't create cpanfile for builder: $!";
    print {$cpanfile} <<CPANFILE;
on develop => sub {
    requires 'IO::Uncompress::Gunzip', '0';
    requires 'Carton', '1.0.34_1', git => 'https://github.com/Nikolo/carton.git'; #https://github.com/perl-carton/carton/pull/263
    requires 'CPAN::Mirror::Tiny', '0.20';
    requires 'Capture::Tiny';
    requires 'Path::Tiny';
    requires 'Test::More', '0.98';
    requires 'Archive::Tar';
    requires 'Archive::Zip', '!= 1.66';
    requires 'JSON::XS', '0';
};
CPANFILE
    close($cpanfile);
}

sub cpm {
    my $prefix = shift;

    my $this_perl = $^X;
    my @perl_includes = map {"-I $_"} @lib_cpm;
    my $cmd = join(" ", $this_perl, @perl_includes, $bin_cpm, @_);
    warn "\e[1;31m$prefix\e[m " . $cmd . "\n";
    return system($cmd);
}

sub gen_snapshot {
    warn "\e[1;31mGenerate snapshot\e[m\n";
    require 'Carton/Snapshot.pm';
    my $snapshot = Carton::Snapshot->new(path => $cpanfile_snapshot);
    my $no_exclude = CPAN::Meta::Requirements->new;
    $snapshot->find_installs("local", $no_exclude);
    $snapshot->save;
}

my @params = ("install");

my $resolver = '';

if ($restore) {
    die "$cpanfile_snapshot not exist" unless -f $cpanfile_snapshot;
    remove_tree 'local';
    push @params, ("--resolver", 'snapshot')
}

if ($force) {
    unlink $cpanfile_snapshot if -f $cpanfile_snapshot;
    push @params, "--reinstall";
}

if ($rebuild){
    push @params, "--no-prebuilt", "--reinstall";
}

my $dir = Cwd::getcwd();

chdir $build_dir;
die "cpm return code not 0" if cpm "Build devel package", "install", "--with-develop";
chdir $dir;
if ($update or $install) {
    if ($update) {
        #remove_tree 'local';
        #die "cpm return code not 0" if cpm "Build project", 'install', "--resolver", 'snapshot';
    }
    die "cpm return code not 0" if cpm "Build project", @params, split(',', $update) , split(',', $install);
    gen_snapshot;
    if ($update) {
        remove_tree 'local';
        die "cpm return code not 0" if cpm "Build project", 'install', "--resolver", 'snapshot';
    }
} else {
    if ($restore) {
        warn "Clean local";
        remove_tree 'local';
    }
    die "cpm return code not 0" if cpm "Build project", @params;
    gen_snapshot unless $restore;
}

